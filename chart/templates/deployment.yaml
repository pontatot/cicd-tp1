apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      initContainers:
        - name: wait-for-db
          image: postgres:latest
          command: ['sh', '-c', 
            'until pg_isready -h {{ .Release.Name }}-postgresql -U {{ .Values.postgresql.postgresqlUsername }} -d {{ .Values.postgresql.postgresqlDatabase }}; do echo waiting for database; sleep 2; done;']
        {{- if .Values.databaseCopy.enabled }}
        - name: copy-production-data
          image: postgres:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Copying production database to PR environment..."
              
              # Check if source database is available
              if ! pg_isready -h {{ .Values.databaseCopy.sourceNamespace }}-postgresql.{{ .Values.databaseCopy.sourceNamespace }}.svc.cluster.local -U {{ .Values.postgresql.postgresqlUsername }} -d {{ .Values.databaseCopy.sourceDatabase }}; then
                echo "ERROR: Source database is not ready"
                exit 1
              fi
              
              echo "Dumping production database..."
              PGPASSWORD={{ .Values.postgresql.postgresqlPassword }} pg_dump \
                -h {{ .Values.databaseCopy.sourceNamespace }}-postgresql.{{ .Values.databaseCopy.sourceNamespace }}.svc.cluster.local \
                -U {{ .Values.postgresql.postgresqlUsername }} \
                -d {{ .Values.databaseCopy.sourceDatabase }} \
                --no-owner --no-privileges > /tmp/prod_dump.sql
              
              echo "Restoring to PR database..."
              PGPASSWORD={{ .Values.postgresql.postgresqlPassword }} psql \
                -h {{ .Release.Name }}-postgresql \
                -U {{ .Values.postgresql.postgresqlUsername }} \
                -d {{ .Values.postgresql.postgresqlDatabase }} \
                -f /tmp/prod_dump.sql
              
              echo "Database copy completed successfully!"
          env:
            - name: PGPASSWORD
              value: {{ .Values.postgresql.postgresqlPassword }}
        {{- end }}
      containers:
        - name: go-web-service
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: CITY_API_ADDR
              value: "0.0.0.0"
            - name: CITY_API_PORT
              value: "{{ .Values.service.port }}"
            - name: CITY_API_DB_URL
              value: "{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}"
            - name: CITY_API_DB_USER
              value: "{{ .Values.postgresql.postgresqlUsername }}"
            - name: CITY_API_DB_PWD
              value: "{{ .Values.postgresql.postgresqlPassword }}"
